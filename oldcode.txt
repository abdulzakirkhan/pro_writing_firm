 console.log("location",location.pathname)
          let tableRows = "";
          const orderIds: string[] = [];
          selectOrders[0]?.orders?.forEach((order, index) => {
            orderIds.push(order?.id);
            tableRows += `
                  <tr>
                    <td>${index + 1}</td>
                    <td>${order?.id}</td>
                    <td>${order?.price}</td>
                  </tr>`;
          });

          const tableHTML = `
          <div id="payment-table" class="p-4 bg-white rounded-lg shadow-md mx-auto">
            <table class="min-w-full table-auto border border-gray-200 rounded-md">
              <thead class="bg-gray-100">
                <tr>
                  <th class="px-4 py-2 text-left text-sm font-semibold text-gray-700 border-b">Sr No</th>
                  <th class="px-4 py-2 text-left text-sm font-semibold text-gray-700 border-b">Order ID</th>
                  <th class="px-4 py-2 text-left text-sm font-semibold text-gray-700 border-b">Price</th>
                </tr>
              </thead>
              <tbody class="divide-y divide-gray-100">
                ${tableRows}
              </tbody>
            </table>
            <p class="mt-4 text-right font-semibold text-gray-800">
              Remaining: ${paymentType == "partial" ? total - partialAmount : 0}
            </p>
          </div>
          `;

          const tableParent = document.getElementById("table-Image");
          tableParent.innerHTML = tableHTML;

          // 2. Wait for rendering
          await new Promise((resolve) => setTimeout(resolve, 100));
          const element = document.getElementById("table-Image");
          const canvas = await html2canvas(element);

          // 4. Convert canvas to blob
          const blob = await new Promise<Blob | null>((resolve) =>
            canvas.toBlob(resolve, "image/png")
          );

          if (!blob || blob.size < 100) {
            console.error("Blob is empty or invalid â€” image likely failed.");
            return;
          }

          // 5. Create File and append to FormData

          const file = new File([blob], "order_table.png", {
            type: "image/png",
          });
          const formData = new FormData();
            // console.log("Screenshot File created:", file);
            formData.append("screenshot", file);
            formData.append("token", token);
            formData.append("agent_id", user?.agent_user_id);
            formData.append("currency", getCurrency(user?.currency));
            formData.append("amount", getFormattedPriceWith3(cardConsumableAmount));
            formData.append(
              "serviceCharges",
              getFormattedPriceWith3(acutalServiceFee)
            );
            formData.append("orderid", orderIds.join(","));
            formData.append(
              "rewardamount",
              getFormattedPriceWith3(consumableObj.rewardConsumableAmount)
            );
            formData.append(
              "walletamount",
              getFormattedPriceWith3(consumableObj.walletConsumableAmount)
            );
            formData.append("vat", getFormattedPriceWith3(actualVatFee));
            formData.append(
              "additionalAmount",
              getFormattedPriceWith3(consumableObj.additionalAmount)
            );

            const res = await makeMeezanPayment(formData);

            const { data: respData, error } = res || {};
            if (respData) {
            if (respData?.result == 'Successfully Paid') {
              toast.success("Successfully Paid")
              console.log("params")
              setTimeout(() => {
                navigate("/orders", { replace: true });
              }, 2000); 
              setStep(3); // optionally show success step
            } else {
              toast.error("Something went wrong.")
            // navigation.navigate(navigationRoutes.ORDER_DETAILS);
            }
            if (error) {
              toast.error("Something went wrong. Please try again.");
            }
          }